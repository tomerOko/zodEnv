להכין קובץ רידמי
לתרגם את ההערה
לעשות את השינויים שכתוב בבניית סכמה בדוגמא
לוודא שזה רץ
להשמתמש בזה בפרוייק אחר, אפשר פשוט לקחת את הדוגמא ולראות שזה רץ אחרי יבוא מ אן פי אם
להוסיף לפרויקט




איך זה עובדֿ
בגדול העבודה מתחלקת ל3 שלבים
שלב ראשון
ליבא את כל הערכים של המשתני סיביבה לקובץ אחד
אם זה בא מפרוסס או מקבצים כמו אי אן וי, ג'יסון או פשוט מודול של  גי אס

* אפשרי לעשות מיניפולציות בשלב הזה כמו לבדוק איזה קבצים קיימים, או לאחד כמה קצבים ל
לקובץ אחד על פי משתנה סביבה
* בשלב הסופי בכל מקרה יהיה טייפ קומפלישן אבל אם רוצים גם בשלב יצירת התבנית שיהיו 
אבל אם רוצים טייפ לשלב יצירת הפרויקט, מומלץ לעבוד עם קובת ג'יסון או טייפסקריפט מיוצא

שלב שני
ליצור תבנית וולידציה של זוד (בלי ערכים דיפולטיבים)
בסוף כל אובייקט לכתוב דיפולט

שלב שלישי
להכניס ערכים ל***דיפולט*** מכל מה שיבאנו בשלב א''
אפשר להכניס ערך אחד,  


tasks:
------
    1. proper environment variable loading
        a. comment above every group in what module are they used
        b. separate to files? 
        c. an example template
        d. a single source of truth (having eventually one single place that concentrates all the environment settings)
            - importable (singleton)
            - created from the last module importing it (first on runtime) (async imports??)
            - changeable and unchangeable groups (object.lock/freeze)
            - Joi validates (and documentation)
            - exported with types
            - all env's imported to one place 
                * from Procces.ENV: Dockerfile, deployment, config maps, jenkins, OS defaults, scripts
                * from files in the project: env, .json, .ts/.js
                * secrets
כרגע כל הקבצים נכנסים לי פרוסס אז הסדר עדיפוית שם זה לא ענינו של הסרבר - רק לתעד את זה
מבחינת קבצים / פרוסס / ערך דיפולטיבי - צריך שתהיה איזשהי מערכת של סדר עדיפויות
מה הקטע של הטייפס - 
 * בטוח שהאינטליסנס ידע את הפרופרטיס
 * שתהיה הערה מעל כל ערך
אולי גם ממש סוג

for both npm_package_template and service_template 
* add a note about the --watchAll and describe.only / test.only
* change the name of the container in the 'bash-in' script to 'package_template_build_container'
* copy the 'test-watch' package.json script and the test.sh script file



open questions:
---------------
    * 

    בכל מקרה היוסר יצתרך:
    1. לכתוב סכמה
        a. import: ellen.sources( schema: ellen.Schema, sources: Array<elln.Source>
            * sources example: [['procces.env', procces.env], ['deafults', defaultsEnv.json]]
        b. creation
            * plain: stripeApi = sources(priority1?, priority2?, priority3..).required()/.default(<value(string/number)>).validate(<see joi validation>).comment(<value(string)>).exampleValue(<value>).lock(boolen)
            * nested: stripeApi = {
                url: sources(priority1?, priority2?, priority3..).required()/.default(<value(string/number)>).validate(<see joi validation>).comment(<value(string)>).exampleValue(<value>).lock(boolen)
                usarname: sources(priority1?, priority2?, priority3..).required()/.default(<value(string/number)>).validate(<see joi validation>).comment(<value(string)>).exampleValue(<value>).lock(boolen)
                paswword: sources(priority1?, priority2?, priority3..).required()/.default(<value(string/number)>).validate(<see joi validation>).comment(<value(string)>).exampleValue(<value>).lock(boolen)
            }





* use zod object default to set the values
* comment above every object in what module are they used
* comment above pr